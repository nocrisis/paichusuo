/** layui-v2.3.0-rc1-lmf-1.0.18 MIT License By https://www.layui.com */
 ;layui.define(function(e){function t(e,t){"object"!=typeof t?t={hash:!!t}:void 0===t.hash&&(t.hash=!0);for(var n=t.hash?{}:"",r=t.serializer||(t.hash?a:i),s=!!t.isIgnoreHidden,c=e&&e.elements?e.elements:[],h=Object.create(null),f=0;f<c.length;++f){var p=c[f],d="true"==p.getAttribute("data-ignore-hidden");if((t.disabled||!p.disabled)&&p.name&&!d&&u.test(p.nodeName)&&!l.test(p.type)&&(!s||"hidden"==p.type||!o(p))){var v=p.name,m=p.value;if("file"===p.type&&(m=p.files[0]),"checkbox"!==p.type&&"radio"!==p.type||p.checked||(m=void 0),t.empty){if("checkbox"!==p.type||p.checked||(m=""),"radio"===p.type&&(h[p.name]||p.checked?p.checked&&(h[p.name]=!0):h[p.name]=!1),void 0==m&&"radio"==p.type)continue}else if(!m)continue;if("select-multiple"!==p.type)n=r(n,v,m);else{m=[];for(var y=p.options,g=!1,b=0;b<y.length;++b){var k=y[b],x=t.empty&&!k.value,A=k.value||x;k.selected&&A&&(g=!0,n=t.hash&&"[]"!==v.slice(v.length-2)?r(n,v+"[]",k.value):r(n,v,k.value))}!g&&t.empty&&(n=r(n,v,""))}}}if(t.empty)for(var v in h)h[v]||(n=r(n,v,""));return n}function n(e){var t=[],n=/^([^\[\]]*)/,r=new RegExp(s),a=n.exec(e);for(a[1]&&t.push(a[1]);null!==(a=r.exec(e));)t.push(a[1]);return t}function r(e,t,n){if(0===t.length)return e=n;var a=t.shift(),i=a.match(/^\[(.+?)\]$/);if("[]"===a)return e=e||[],Array.isArray(e)?e.push(r(null,t,n)):(e._values=e._values||[],e._values.push(r(null,t,n))),e.filter(function(e){return""!=e});if(i){var l=i[1],u=+l;isNaN(u)?(e=e||{},e[l]=r(e[l],t,n)):(e=e||[],e[u]=r(e[u],t,n))}else e[a]=r(e[a],t,n);return e}function a(e,t,a){var i=t.match(s);if(i){var l=n(t);r(e,l,a)}else{var u=e[t];u?(Array.isArray(u)||(e[t]=[u]),e[t].push(a)):e[t]=a}return e}function i(e,t,n){return n=n.replace(/(\r)?\n/g,"\r\n"),n=encodeURIComponent(n),n=n.replace(/%20/g,"+"),e+(e?"&":"")+encodeURIComponent(t)+"="+n}var l=/^(?:submit|button|image|reset)$/i,u=/^(?:input|select|textarea|keygen)/i,s=/(\[[^\[\]]*\])/g,o=function(e){return null===e.offsetParent};e("formSerialize",t)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,

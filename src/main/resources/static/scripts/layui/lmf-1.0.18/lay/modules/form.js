/** layui-v2.3.0-rc1-lmf-1.0.18 MIT License By https://www.layui.com */
 ;layui.define(["layer","formSerialize"],function(e){"use strict";var t=layui.$,i=layui.layer,a=layui.hint(),n=layui.device(),l=layui.formSerialize,r="form",s=".layui-form",o="layui-this",c="layui-hide",u="layui-disabled",d=function(){this.config={verify:{"*":[/[\w\W]+/,"必填项不能为空"],"*6-16":[/^[\w\W]{6,16}$/,"请填写6到16位任意字符！"],n:[/^\d+$/,"请填写数字！"],"n6-16":[/^\d{6,16}$/,"请填写6到16位任意字符！"],s:[/^[\u4E00-\u9FA5\uf900-\ufa2d\w\.\s]+$/,"不能输入特殊字符！"],"s6-18":[/^[\u4E00-\u9FA5\uf900-\ufa2d\w\.\s]{6,18}$/,"请填写6到18位字符！"],required:[/[\S]+/,"必填项不能为空"],phone:[/^1\d{10}$/,"请输入正确的手机号"],email:[/^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/,"邮箱格式不正确"],url:[/(^#)|(^http(s*):\/\/[^\s]+\.[^\s]+)/,"链接格式不正确"],number:function(e){if(!e||isNaN(e))return"只能填写数字"},date:[/^(\d{4})[-\/](\d{1}|0\d{1}|1[0-2])([-\/](\d{1}|0\d{1}|[1-2][0-9]|3[0-1]))*$/,"日期格式不正确"],identity:[/(^\d{15}$)|(^\d{17}(x|X|\d)$)/,"请输入正确的身份证号"]}}};d.prototype.set=function(e){var i=this;return t.extend(!0,i.config,e),i},d.prototype.verify=function(e){var i=this;return t.extend(!0,i.config.verify,e),i},d.prototype.on=function(e,t){return layui.onevent.call(this,r,e,t)},d.prototype.val=function(e,i){var a=t(s+'[lay-filter="'+e+'"]');a.each(function(e,a){var n=t(this);layui.each(i,function(e,t){var i,a=n.find('[name="'+e+'"]');a[0]&&(i=a[0].type,"checkbox"===i?a[0].checked=t:"radio"===i?a.each(function(){this.value===t&&(this.checked=!0)}):a.val(t))})}),h.render(null,e)},d.prototype.render=function(e,i){var n=this,l=t(s+function(){return i?'[lay-filter="'+i+'"]':""}()),d={select:function(){var e,i="请选择",a="layui-form-select",n="layui-select-title",s="layui-select-none",d="",f=l.find("select"),v=function(i,l){t(i.target).parent().hasClass(n)&&!l||(t("."+a).removeClass(a+"ed "+a+"up"),e&&d&&e.val(d)),e=null},h=function(i,l,f){var h,y=t(this),m=i.find("."+n),g=m.find("input"),x=i.find("dl"),k=x.children("dd"),b=this.selectedIndex;if(!l){var C=function(){var e=i.offset().top+i.outerHeight()+5-p.scrollTop(),t=x.outerHeight();b=y[0].selectedIndex,i.addClass(a+"ed"),k.removeClass(c),h=null,k.eq(b).addClass(o).siblings().removeClass(o),e+t>p.height()&&e>=t&&i.addClass(a+"up")},w=function(e){i.removeClass(a+"ed "+a+"up"),g.blur(),h=null,e||T(g.val(),function(e){e&&(d=x.find("."+o).html(),g&&g.val(d))})};m.on("click",function(e){i.hasClass(a+"ed")?w():(v(e,!0),C()),x.find("."+s).remove()}),m.find(".layui-edge").on("click",function(){g.focus()}),g.on("keyup",function(e){var t=e.keyCode;9===t&&C()}).on("keydown",function(e){var t=e.keyCode;9===t&&w();var i=function(t,a){var n,l;if(e.preventDefault(),a=function(){return a&&a[0]?a:h&&h[0]?h:k.eq(b)}(),l=a[t](),n=a[t]("dd"),l[0]){if(h=a[t](),!n[0]||n.hasClass(u))return i(t,h);n.addClass(o).siblings().removeClass(o);var r=x.children("dd.layui-this"),s=r.position().top,c=x.height(),d=r.height();s>c&&x.scrollTop(s+x.scrollTop()-c+d-5),s<0&&x.scrollTop(s+x.scrollTop())}};38===t&&i("prev"),40===t&&i("next"),13===t&&(e.preventDefault(),x.children("dd."+o).trigger("click"))});var T=function(e,i,a){var n=0;layui.each(k,function(){var i=t(this),l=i.text(),r=l.indexOf(e)===-1;(""===e||"blur"===a?e!==l:r)&&n++,"keyup"===a&&i[r?"addClass":"removeClass"](c)});var l=n===k.length;return i(l),l},$=function(e){var t=this.value,i=e.keyCode;return 9!==i&&13!==i&&37!==i&&38!==i&&39!==i&&40!==i&&(T(t,function(e){e?x.find("."+s)[0]||x.append('<p class="'+s+'">无匹配项</p>'):x.find("."+s).remove()},"keyup"),void(""===t&&x.find("."+s).remove()))};f&&g.on("keyup",$).on("blur",function(i){var a=y[0].selectedIndex;e=g,d=t(y[0].options[a]).html(),setTimeout(function(){T(g.val(),function(e){d||g.val("")},"blur")},200)}),k.on("click",function(){var e=t(this),a=e.attr("lay-value"),n=y.attr("lay-filter");return!e.hasClass(u)&&(e.hasClass("layui-select-tips")?g.val(""):(g.val(e.text()),e.addClass(o)),e.siblings().removeClass(o),y.val(a).removeClass("layui-form-danger").trigger("change"),layui.event.call(this,r,"select("+n+")",{elem:y[0],value:a,othis:i}),w(!0),!1)}),i.find("dl>dt").on("click",function(e){return!1}),t(document).off("click",v).on("click",v)}};f.each(function(e,l){var r=t(this),s=r.next("."+a),c=this.disabled,d=l.value,f=t(l.options[l.selectedIndex]),v=l.options[0];if("string"==typeof r.attr("lay-ignore"))return r.show();var y="string"==typeof r.attr("lay-search"),p=v?v.value?i:v.innerHTML||i:i,m=t(['<div class="'+(y?"":"layui-unselect ")+a,(c?" layui-select-disabled":"")+'">','<div class="'+n+'">','<input type="text" placeholder="'+p+'" '+('value="'+(d?f.html():"")+'"')+(y?"":" readonly")+' class="layui-input'+(y?"":" layui-unselect")+(c?" "+u:"")+'">','<i class="layui-edge"></i></div>','<dl class="layui-anim layui-anim-upbit'+(r.find("optgroup")[0]?" layui-select-group":"")+'">',function(e){var t=[];return layui.each(e,function(e,a){0!==e||a.value?"optgroup"===a.tagName.toLowerCase()?t.push("<dt>"+a.label+"</dt>"):t.push('<dd lay-value="'+a.value+'" title="'+a.value+'"  class="'+(d===a.value?o:"")+(a.disabled?" "+u:"")+'">'+a.innerHTML+"</dd>"):t.push('<dd lay-value="" class="layui-select-tips">'+(a.innerHTML||i)+"</dd>")}),0===t.length&&t.push('<dd lay-value="" class="'+u+'">没有选项</dd>'),t.join("")}(r.find("*"))+"</dl>","</div>"].join(""));s[0]&&s.remove(),r.after(m),h.call(this,m,c,y)})},checkbox:function(){var e={checkbox:["layui-form-checkbox","layui-form-checked","checkbox"],_switch:["layui-form-switch","layui-form-onswitch","switch"]},i=l.find("input[type=checkbox]"),a=function(e,i){var a=t(this);e.on("click",function(){var t=a.attr("lay-filter"),n=(a.attr("lay-text")||"").split("|");a[0].disabled||(a[0].checked?(a[0].checked=!1,e.removeClass(i[1]).find("em").text(n[1])):(a[0].checked=!0,e.addClass(i[1]).find("em").text(n[0])),a.trigger("change"),layui.event.call(a[0],r,i[2]+"("+t+")",{elem:a[0],value:a[0].value,othis:e}))})};i.each(function(i,n){var l=t(this),r=l.attr("lay-skin"),s=(l.attr("lay-text")||"").split("|"),o=this.disabled;"switch"===r&&(r="_"+r);var c=e[r]||e.checkbox;if("string"==typeof l.attr("lay-ignore"))return l.show();var d=l.next("."+c[0]),f=t(['<div class="layui-unselect '+c[0],n.checked?" "+c[1]:"",o?" layui-checkbox-disbaled "+u:"",'"',r?' lay-skin="'+r+'"':"",">",function(){var e=n.title.replace(/\s/g,""),t={checkbox:[e?"<span>"+n.title+"</span>":"",'<i class="layui-icon layui-icon-ok"></i>'].join(""),_switch:"<em>"+((n.checked?s[0]:s[1])||"")+"</em><i></i>"};return t[r]||t.checkbox}(),"</div>"].join(""));d[0]&&d.remove(),l.after(f),a.call(this,f,c)})},radio:function(){var e="layui-form-radio",i=["&#xe643;","&#xe63f;"],a=l.find("input[type=radio]"),n=function(a){var n=t(this),l="layui-anim-scaleSpring";a.on("click",function(){var o=n[0].name,c=n.parents(s),u=n.attr("lay-filter"),d=c.find("input[name="+o.replace(/(\.|#|\[|\])/g,"\\$1")+"]");n[0].disabled||(layui.each(d,function(){var a=t(this).next("."+e);this.checked=!1,a.removeClass(e+"ed"),a.find(".layui-icon").removeClass(l).html(i[1])}),n[0].checked=!0,a.addClass(e+"ed"),a.find(".layui-icon").addClass(l).html(i[0]),n.trigger("change"),layui.event.call(n[0],r,"radio("+u+")",{elem:n[0],value:n[0].value,othis:a}))})};a.each(function(a,l){var r=t(this),s=r.next("."+e),o=this.disabled;if("string"==typeof r.attr("lay-ignore"))return r.show();s[0]&&s.remove();var c=t(['<div class="layui-unselect '+e,l.checked?" "+e+"ed":"",(o?" layui-radio-disbaled "+u:"")+'">','<i class="layui-anim layui-icon">'+i[l.checked?0:1]+"</i>","<div>"+function(){var e=l.title||"";return"string"==typeof r.next().attr("lay-radio")&&(e=r.next().html(),r.next().remove()),e}()+"</div>","</div>"].join(""));r.after(c),n.call(this,c)})}};return e?d[e]?d[e]():a.error("不支持的"+e+"表单渲染"):layui.each(d,function(e,t){t()}),n};var f=function(e,t,i,a){var n="",l=!1,r=/\/.+\//g,s=/^(.+?)(\d+)-(\d+)$/,o=h.config.verify;if(r.test(e)){var c=e.match(r)[0].slice(1,-1),u=e.replace(r,""),d=RegExp(c,u);l=d.test(t)}else if("[object RegExp]"==Object.prototype.toString.call(o[e]))l=o[e].test(t);else if("function"==typeof o[e])l=o[e](t,i),l===!0||l===a?l=!0:(n=l,l=!1);else if("[object Array]"==Object.prototype.toString.call(o[e]))l=o[e][0].test(t),l||(n=""==t?i.attr("lay-nullText")||o[e][1]:i.attr("lay-errorText")||o[e][1]);else{if(!(e in o)){var f,v=e.match(s);if(v){for(var y in o)if(f=y.match(s),f&&v[1]===f[1]){var p=o[y][0].toString(),u=p.match(/\/[mgi]*/g)[1].replace("/",""),m=new RegExp("\\{"+f[2]+","+f[3]+"\\}","g");p=p.replace(/\/[mgi]*/g,"/").replace(m,"{"+v[2]+","+v[3]+"}").replace(/^\//,"").replace(/\/$/,""),o[e]=new RegExp(p,u);break}}else l=!1}"[object RegExp]"==Object.prototype.toString.call(o[e])&&(l=o[e].test(t))}if(l&&i.attr("recheck")){var g=i.parents("form").find("input[name='"+i.attr("recheck")+"']:first");t!=g.val()&&(l=!1,n=i.attr("lay-recheck-errorText")||"")}return l||(""==t&&""==n&&(n=i.attr("lay-nullText")||"必填项不能为空!"),n=n||i.attr("lay-errorText")||(o[e]?o[e][1]:"填写错误,请检查!")),{passed:l,errorText:n}},v=function(){var e=t(this),a=(h.config.verify,null),o="layui-form-danger",c=e.parents(s),u=c.find("*[lay-verify]"),d=e.parents("form")[0],v=e.attr("lay-filter"),y=e.parents("form").data("ignoreHidden")||!1;if(layui.each(u,function(e,l){var r=t(this),s=r.attr("lay-verify").split("|"),c=r.attr("lay-verType"),u=r.data("ignoreHidden")||!1,d="file"==this.type?this.files[0]:r.val();return r.removeClass(o),!u&&((!y||!r.is(":hidden"))&&(layui.each(s,function(e,t){var s=f(t,d,r),u=!s.passed,v=s.errorText||"";if(u){if("tips"===c?i.tips(v,function(){return"string"==typeof r.attr("lay-ignore")||"select"!==l.tagName.toLowerCase()&&!/^checkbox|radio$/.test(l.type)?r:r.next()}(),{tips:1}):"alert"===c?i.alert(v,{title:"提示",shadeClose:!0}):i.msg(v,{icon:5,shift:6}),!n.android&&!n.ios){l.focus();var h=function(e){if(e.fireEvent)e.fireEvent("onfocus");else{var t=document.createEvent("HTMLEvents");t.initEvent("focus",!1,!0),e.dispatchEvent(t)}};r.hasClass("layui-icon-date")&&setTimeout(function(){h(r.get(0))},500)}return r.addClass(o),a=!0}}),a?a:void 0))}),a)return!1;var p=l(d,{hash:!0,empty:!0,isIgnoreHidden:y});return layui.event.call(this,r,"submit("+v+")",{elem:this,form:d,field:p})},h=new d,y=t(document),p=t(window);h.render(),y.on("reset",s,function(){var e=t(this).attr("lay-filter");setTimeout(function(){h.render(null,e)},50)}),y.on("submit",s,v).on("click","*[lay-submit]",v),e(r,h)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxheS9tb2R1bGVzL2Zvcm0uanMiXSwibmFtZXMiOlsibGF5dWkiLCJkZWZpbmUiLCJleHBvcnRzIiwiJCIsImxheWVyIiwiaGludCIsImRldmljZSIsImZvcm1TZXJpYWxpemUiLCJNT0RfTkFNRSIsIkVMRU0iLCJUSElTIiwiSElERSIsIkRJU0FCTEVEIiwiRm9ybSIsInRoaXMiLCJjb25maWciLCJ2ZXJpZnkiLCIqIiwiKjYtMTYiLCJuIiwibjYtMTYiLCJzIiwiczYtMTgiLCJyZXF1aXJlZCIsInBob25lIiwiZW1haWwiLCJ1cmwiLCJudW1iZXIiLCJ2YWx1ZSIsImlzTmFOIiwiZGF0ZSIsImlkZW50aXR5IiwicHJvdG90eXBlIiwic2V0Iiwib3B0aW9ucyIsInRoYXQiLCJleHRlbmQiLCJzZXR0aW5ncyIsIm9uIiwiZXZlbnRzIiwiY2FsbGJhY2siLCJvbmV2ZW50IiwiY2FsbCIsInZhbCIsImZpbHRlciIsIm9iamVjdCIsImZvcm1FbGVtIiwiZWFjaCIsImluZGV4IiwiaXRlbSIsIml0ZW1Gcm9tIiwia2V5IiwidHlwZSIsIml0ZW1FbGVtIiwiZmluZCIsImNoZWNrZWQiLCJmb3JtIiwicmVuZGVyIiwiZWxlbUZvcm0iLCJpdGVtcyIsInNlbGVjdCIsInRoYXRJbnB1dCIsIlRJUFMiLCJDTEFTUyIsIlRJVExFIiwiTk9ORSIsImluaXRWYWx1ZSIsInNlbGVjdHMiLCJoaWRlIiwiZSIsImNsZWFyIiwidGFyZ2V0IiwicGFyZW50IiwiaGFzQ2xhc3MiLCJyZW1vdmVDbGFzcyIsInJlRWxlbSIsImRpc2FibGVkIiwiaXNTZWFyY2giLCJuZWFyRWxlbSIsInRpdGxlIiwiaW5wdXQiLCJkbCIsImRkcyIsImNoaWxkcmVuIiwic2VsZWN0ZWRJbmRleCIsInNob3dEb3duIiwidG9wIiwib2Zmc2V0Iiwib3V0ZXJIZWlnaHQiLCIkd2luIiwic2Nyb2xsVG9wIiwiZGxIZWlnaHQiLCJhZGRDbGFzcyIsImVxIiwic2libGluZ3MiLCJoZWlnaHQiLCJoaWRlRG93biIsImNob29zZSIsImJsdXIiLCJub3RPcHRpb24iLCJub25lIiwiaHRtbCIsInJlbW92ZSIsImZvY3VzIiwia2V5Q29kZSIsInNldFRoaXNEZCIsInByZXZOZXh0IiwidGhpc0VsZW0iLCJuZWFyRGQiLCJjYWNoZU5lYXJFbGVtIiwicHJldmVudERlZmF1bHQiLCJkZFRoaXMiLCJwb3NUb3AiLCJwb3NpdGlvbiIsImRkSGVpZ2h0IiwidHJpZ2dlciIsIm9yaWdpbiIsIm51bSIsIm90aGlzIiwidGV4dCIsIm5vdCIsImluZGV4T2YiLCJsZW5ndGgiLCJzZWFyY2giLCJhcHBlbmQiLCJzZXRUaW1lb3V0IiwiYXR0ciIsImV2ZW50IiwiZWxlbSIsImRvY3VtZW50Iiwib2ZmIiwiaGFzUmVuZGVyIiwibmV4dCIsInNlbGVjdGVkIiwib3B0aW9uc0ZpcnN0Iiwic2hvdyIsInBsYWNlaG9sZGVyIiwiaW5uZXJIVE1MIiwiYXJyIiwidGFnTmFtZSIsInRvTG93ZXJDYXNlIiwicHVzaCIsImxhYmVsIiwiam9pbiIsImFmdGVyIiwiY2hlY2tib3giLCJfc3dpdGNoIiwiY2hlY2tzIiwiUkVfQ0xBU1MiLCJjaGVjayIsInNwbGl0Iiwic2tpbiIsInJlcGxhY2UiLCJyYWRpbyIsIklDT04iLCJyYWRpb3MiLCJBTklNIiwibmFtZSIsImZvcm1zIiwicGFyZW50cyIsInNhbWVSYWRpbyIsImVycm9yIiwiX3JlZ2NoZWNrIiwiZGF0YXR5cGUiLCJnZXRzIiwib2JqIiwidW5kZWYiLCJpbmZvIiwicGFzc2VkIiwicmVnIiwicmVnZXgiLCJ0ZXN0IiwicmVnc3RyIiwibWF0Y2giLCJzbGljZSIsInBhcmFtIiwicmV4cCIsIlJlZ0V4cCIsIk9iamVjdCIsInRvU3RyaW5nIiwidGVtcCIsIm1hYyIsInN0ciIsInJlZ3hwIiwidGhlb3RoZXIiLCJlcnJvclRleHQiLCJzdWJtaXQiLCJidXR0b24iLCJzdG9wIiwiREFOR0VSIiwidmVyaWZ5RWxlbSIsImlnbm9yZUhpZGRlbiIsImRhdGEiLCJfIiwidmVycyIsInZlclR5cGUiLCJvdGhpc19pZ25vcmVIaWRkZW4iLCJmaWxlcyIsImlzIiwidGhpc1ZlciIsInZlcmlmeV9yZXMiLCJpc1RydWUiLCJ0aXBzIiwiYWxlcnQiLCJzaGFkZUNsb3NlIiwibXNnIiwiaWNvbiIsInNoaWZ0IiwiYW5kcm9pZCIsImlvcyIsImZpcmVFdmVudCIsImV2IiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiZ2V0IiwiZmllbGQiLCJoYXNoIiwiZW1wdHkiLCJpc0lnbm9yZUhpZGRlbiIsIiRkb20iLCJ3aW5kb3ciXSwibWFwcGluZ3MiOiI7RUFRQUEsTUFBTUMsUUFBUSxRQUFTLGlCQUFrQixTQUFVQyxHQUMvQyxZQUVBLElBQUlDLEdBQUlILE1BQU1HLEVBQ1JDLEVBQVFKLE1BQU1JLE1BQ2RDLEVBQU9MLE1BQU1LLE9BQ2JDLEVBQVNOLE1BQU1NLFNBQ2ZDLEVBQWdCUCxNQUFNTyxjQUV0QkMsRUFBVyxPQUFRQyxFQUFPLGNBQWVDLEVBQU8sYUFDM0JDLEVBQU8sYUFBY0MsRUFBVyxpQkFFckRDLEVBQU8sV0FDVEMsS0FBS0MsUUFDREMsUUFDSUMsS0FDSSxVQUNFLFdBRUpDLFNBQ0UsaUJBQ0UsaUJBRUpDLEdBQ0UsUUFDRSxVQUVKQyxTQUNFLGFBQ0UsaUJBRUpDLEdBQ0Usd0NBQ0UsYUFFSkMsU0FDRSw2Q0FDRSxlQUVKQyxVQUNFLFFBQ0UsV0FFSkMsT0FDRSxZQUNFLGFBRUpDLE9BQ0Usa0VBQ0UsV0FFSkMsS0FDRSxzQ0FDRSxXQUVKQyxPQUFRLFNBQVVDLEdBQ2hCLElBQUtBLEdBQVNDLE1BQU1ELEdBQVEsTUFBTyxVQUVyQ0UsTUFDRSw4RUFDRSxXQUVKQyxVQUNFLGdDQUNFLGdCQU9sQmxCLEdBQUttQixVQUFVQyxJQUFNLFNBQVVDLEdBQzNCLEdBQUlDLEdBQU9yQixJQUVYLE9BREFYLEdBQUVpQyxRQUFPLEVBQU1ELEVBQUtwQixPQUFRbUIsR0FDckJDLEdBSVh0QixFQUFLbUIsVUFBVWhCLE9BQVMsU0FBVXFCLEdBQzlCLEdBQUlGLEdBQU9yQixJ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LEdBRzlFLE9BQU8vTCxPQUFNK0gsTUFBTXJGLEtBQUs1QixLQUFNTixFQUFVLFVBQVlvQyxFQUFTLEtBQ3pEb0YsS0FBTWxILEtBQ0owQyxLQUFNVixFQUNOMEssTUFBT0EsS0FLYmhLLEVBQU8sR0FBSTNDLEdBQ1QrTSxFQUFPek4sRUFBRThILFVBQVd4QyxFQUFPdEYsRUFBRTBOLE9BRW5DckssR0FBS0MsU0FHTG1LLEVBQUt0TCxHQUFHLFFBQVM3QixFQUFNLFdBQ25CLEdBQUltQyxHQUFTekMsRUFBRVcsTUFBTWdILEtBQUssYUFDMUJELFlBQVcsV0FDUHJFLEVBQUtDLE9BQU8sS0FBTWIsSUFDbkIsTUFJUGdMLEVBQUt0TCxHQUFHLFNBQVU3QixFQUFNaUwsR0FDbkJwSixHQUFHLFFBQVMsZ0JBQWlCb0osR0FFbEN4TCxFQUFRTSxFQUFVZ0QiLCJmaWxlIjoibGF5L21vZHVsZXMvZm9ybS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuXG4gQE5hbWXvvJpsYXl1aS5mb3JtIOihqOWNlee7hOS7tlxuIEBBdXRob3LvvJrotKTlv4NcbiBATGljZW5zZe+8mk1JVFxuXG4gKi9cblxubGF5dWkuZGVmaW5lKFsnbGF5ZXInLCAnZm9ybVNlcmlhbGl6ZSddLCBmdW5jdGlvbiAoZXhwb3J0cykge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgdmFyICQgPSBsYXl1aS4kXG4gICAgICAgICwgbGF5ZXIgPSBsYXl1aS5sYXllclxuICAgICAgICAsIGhpbnQgPSBsYXl1aS5oaW50KClcbiAgICAgICAgLCBkZXZpY2UgPSBsYXl1aS5kZXZpY2UoKVxuICAgICAgICAsIGZvcm1TZXJpYWxpemUgPSBsYXl1aS5mb3JtU2VyaWFsaXplXG5cbiAgICAgICAgLCBNT0RfTkFNRSA9ICdmb3JtJywgRUxFTSA9ICcubGF5dWktZm9ybScsIFRISVMgPSAnbGF5dWktdGhpcydcbiAgICAgICAgLCBTSE9XID0gJ2xheXVpLXNob3cnLCBISURFID0gJ2xheXVpLWhpZGUnLCBESVNBQkxFRCA9ICdsYXl1aS1kaXNhYmxlZCdcblxuICAgICAgICAsIEZvcm0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY29uZmlnID0ge1xuICAgICAgICAgICAgdmVyaWZ5OiB7XG4gICAgICAgICAgICAgICAgXCIqXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgL1tcXHdcXFddKy9cbiAgICAgICAgICAgICAgICAgICAgLCAn5b+F5aGr6aG55LiN6IO95Li656m6J1xuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAsIFwiKjYtMTZcIjogW1xuICAgICAgICAgICAgICAgICAgICAvXltcXHdcXFddezYsMTZ9JC9cbiAgICAgICAgICAgICAgICAgICAgLCAn6K+35aGr5YaZNuWIsDE25L2N5Lu75oSP5a2X56ym77yBJ1xuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAsIFwiblwiOiBbXG4gICAgICAgICAgICAgICAgICAgIC9eXFxkKyQvXG4gICAgICAgICAgICAgICAgICAgICwgJ+ivt+Whq+WGmeaVsOWtl++8gSdcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgLCBcIm42LTE2XCI6IFtcbiAgICAgICAgICAgICAgICAgICAgL15cXGR7NiwxNn0kL1xuICAgICAgICAgICAgICAgICAgICAsICfor7floavlhpk25YiwMTbkvY3ku7vmhI/lrZfnrKbvvIEnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICwgXCJzXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgL15bXFx1NEUwMC1cXHU5RkE1XFx1ZjkwMC1cXHVmYTJkXFx3XFwuXFxzXSskL1xuICAgICAgICAgICAgICAgICAgICAsICfkuI3og73ovpPlhaXnibnmrorlrZfnrKbvvIEnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICwgXCJzNi0xOFwiOiBbXG4gICAgICAgICAgICAgICAgICAgIC9eW1xcdTRFMDAtXFx1OUZBNVxcdWY5MDAtXFx1ZmEyZFxcd1xcLlxcc117NiwxOH0kL1xuICAgICAgICAgICAgICAgICAgICAsICfor7floavlhpk25YiwMTjkvY3lrZfnrKbvvIEnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICwgcmVxdWlyZWQ6IFtcbiAgICAgICAgICAgICAgICAgICAgL1tcXFNdKy9cbiAgICAgICAgICAgICAgICAgICAgLCAn5b+F5aGr6aG55LiN6IO95Li656m6J1xuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAsIHBob25lOiBbXG4gICAgICAgICAgICAgICAgICAgIC9eMVxcZHsxMH0kL1xuICAgICAgICAgICAgICAgICAgICAsICfor7fovpPlhaXmraPnoa7nmoTmiYvmnLrlj7cnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICwgZW1haWw6IFtcbiAgICAgICAgICAgICAgICAgICAgL14oW2EtekEtWjAtOV9cXC5cXC1dKStcXEAoKFthLXpBLVowLTlcXC1dKStcXC4pKyhbYS16QS1aMC05XXsyLDR9KSskL1xuICAgICAgICAgICAgICAgICAgICAsICfpgq7nrrHmoLzlvI/kuI3mraPnoa4nXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICwgdXJsOiBbXG4gICAgICAgICAgICAgICAgICAgIC8oXiMpfCheaHR0cChzKik6XFwvXFwvW15cXHNdK1xcLlteXFxzXSspL1xuICAgICAgICAgICAgICAgICAgICAsICfpk77mjqXmoLzlvI/kuI3mraPnoa4nXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICwgbnVtYmVyOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWx1ZSB8fCBpc05hTih2YWx1ZSkpIHJldHVybiAn5Y+q6IO95aGr5YaZ5pWw5a2XJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAsIGRhdGU6IFtcbiAgICAgICAgICAgICAgICAgICAgL14oXFxkezR9KVstXFwvXShcXGR7MX18MFxcZHsxfXwxWzAtMl0pKFstXFwvXShcXGR7MX18MFxcZHsxfXxbMS0yXVswLTldfDNbMC0xXSkpKiQvXG4gICAgICAgICAgICAgICAgICAgICwgJ+aXpeacn+agvOW8j+S4jeato+ehridcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgLCBpZGVudGl0eTogW1xuICAgICAgICAgICAgICAgICAgICAvKF5cXGR7MTV9JCl8KF5cXGR7MTd9KHh8WHxcXGQpJCkvXG4gICAgICAgICAgICAgICAgICAgICwgJ+ivt+i+k+WFpeato+ehrueahOi6q+S7veivgeWPtydcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIC8v5YWo5bGA6K6+572uXG4gICAgRm9ybS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAkLmV4dGVuZCh0cnVlLCB0aGF0LmNvbmZpZywgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiB0aGF0O1xuICAgIH07XG5cbiAgICAvL+mqjOivgeinhOWImeiuvuWumlxuICAgIEZvcm0ucHJvdG90eXBlLnZlcmlmeSA9IGZ1bmN0aW9uIChzZXR0aW5ncykge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICQuZXh0ZW5kKHRydWUsIHRoYXQuY29uZmlnLnZlcmlmeSwgc2V0dGluZ3MpO1xuICAgICAgICByZXR1cm4gdGhhdDtcbiAgICB9O1xuXG4gICAgLy/ooajljZXkuovku7bnm5HlkKxcbiAgICBGb3JtLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChldmVudHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiBsYXl1aS5vbmV2ZW50LmNhbGwodGhpcywgTU9EX05BTUUsIGV2ZW50cywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICAvL+WIneWni+i1i+WAvFxuICAgIEZvcm0ucHJvdG90eXBlLnZhbCA9IGZ1bmN0aW9uIChmaWx0ZXIsIG9iamVjdCkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICAgICAgICAgICwgZm9ybUVsZW0gPSAkKEVMRU0gKyAnW2xheS1maWx0ZXI9XCInICsgZmlsdGVyICsgJ1wiXScpO1xuICAgICAgICBmb3JtRWxlbS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgaXRlbSkge1xuICAgICAgICAgICAgdmFyIGl0ZW1Gcm9tID0gJCh0aGlzKTtcbiAgICAgICAgICAgIGxheXVpLmVhY2gob2JqZWN0LCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHZhciBpdGVtRWxlbSA9IGl0ZW1Gcm9tLmZpbmQoJ1tuYW1lPVwiJyArIGtleSArICdcIl0nKVxuICAgICAgICAgICAgICAgICAgICAsIHR5cGU7XG5cbiAgICAgICAgICAgICAgICAvL+WmguaenOWvueW6lOeahOihqOWNleS4jeWtmOWcqO+8jOWImeS4jeaJp+ihjFxuICAgICAgICAgICAgICAgIGlmICghaXRlbUVsZW1bMF0pIHJldHVybjtcbiAgICAgICAgICAgICAgICB0eXBlID0gaXRlbUVsZW1bMF0udHlwZTtcblxuICAgICAgICAgICAgICAgIC8v5aaC5p6c5Li65aSN6YCJ5qGGXG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdjaGVja2JveCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbUVsZW1bMF0uY2hlY2tlZCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3JhZGlvJykgeyAvL+WmguaenOS4uuWNlemAieahhlxuICAgICAgICAgICAgICAgICAgICBpdGVtRWxlbS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tlZCA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgLy/lhbblroPnsbvlnovnmoTooajljZVcbiAgICAgICAgICAgICAgICAgICAgaXRlbUVsZW0udmFsKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZvcm0ucmVuZGVyKG51bGwsIGZpbHRlcik7XG4gICAgfTtcblxuICAgIC8v6KGo5Y2V5o6n5Lu25riy5p+TXG4gICAgRm9ybS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKHR5cGUsIGZpbHRlcikge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICAgICAgICAgICwgZWxlbUZvcm0gPSAkKEVMRU0gKyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpbHRlciA/ICgnW2xheS1maWx0ZXI9XCInICsgZmlsdGVyICsgJ1wiXScpIDogJyc7XG4gICAgICAgICAgICB9KCkpXG4gICAgICAgICAgICAsIGl0ZW1zID0ge1xuXG4gICAgICAgICAgICAvL+S4i+aLiemAieaLqeahhlxuICAgICAgICAgICAgc2VsZWN0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIFRJUFMgPSAn6K+36YCJ5oupJywgQ0xBU1MgPSAnbGF5dWktZm9ybS1zZWxlY3QnLCBUSVRMRSA9ICdsYXl1aS1zZWxlY3QtdGl0bGUnXG4gICAgICAgICAgICAgICAgICAgICwgTk9ORSA9ICdsYXl1aS1zZWxlY3Qtbm9uZScsIGluaXRWYWx1ZSA9ICcnLCB0aGF0SW5wdXRcbiAgICAgICAgICAgICAgICAgICAgLCBzZWxlY3RzID0gZWxlbUZvcm0uZmluZCgnc2VsZWN0JylcblxuICAgICAgICAgICAgICAgICAgICAvL+makOiXjyBzZWxlY3RcbiAgICAgICAgICAgICAgICAgICAgLCBoaWRlID0gZnVuY3Rpb24gKGUsIGNsZWFyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISQoZS50YXJnZXQpLnBhcmVudCgpLmhhc0NsYXNzKFRJVExFKSB8fCBjbGVhcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy4nICsgQ0xBU1MpLnJlbW92ZUNsYXNzKENMQVNTICsgJ2VkICcgKyBDTEFTUyArICd1cCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXRJbnB1dCAmJiBpbml0VmFsdWUgJiYgdGhhdElucHV0LnZhbChpbml0VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdElucHV0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8v5ZCE56eN5LqL5Lu2XG4gICAgICAgICAgICAgICAgICAgICwgZXZlbnRzID0gZnVuY3Rpb24gKHJlRWxlbSwgZGlzYWJsZWQsIGlzU2VhcmNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ID0gJCh0aGlzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgdGl0bGUgPSByZUVsZW0uZmluZCgnLicgKyBUSVRMRSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIGlucHV0ID0gdGl0bGUuZmluZCgnaW5wdXQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgZGwgPSByZUVsZW0uZmluZCgnZGwnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgZGRzID0gZGwuY2hpbGRyZW4oJ2RkJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIGluZGV4ID0gdGhpcy5zZWxlY3RlZEluZGV4IC8v5b2T5YmN6YCJ5Lit55qE57Si5byVXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBuZWFyRWxlbTsgLy9zZWxlY3Qg57uE5Lu25b2T5YmN6YCJ5Lit55qE6ZmE6L+R5YWD57Sg77yM55So5LqO6L6F5Yqp5b+r5o236ZSu5Yqf6IO9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaXNhYmxlZCkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL+WxleW8gOS4i+aLiVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNob3dEb3duID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b3AgPSByZUVsZW0ub2Zmc2V0KCkudG9wICsgcmVFbGVtLm91dGVySGVpZ2h0KCkgKyA1IC0gJHdpbi5zY3JvbGxUb3AoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIGRsSGVpZ2h0ID0gZGwub3V0ZXJIZWlnaHQoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gc2VsZWN0WzBdLnNlbGVjdGVkSW5kZXg7IC8v6I635Y+W5pyA5paw55qEIHNlbGVjdGVkSW5kZXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZUVsZW0uYWRkQ2xhc3MoQ0xBU1MgKyAnZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZHMucmVtb3ZlQ2xhc3MoSElERSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmVhckVsZW0gPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/liJ3lp4vpgInkuK3moLflvI9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZHMuZXEoaW5kZXgpLmFkZENsYXNzKFRISVMpLnNpYmxpbmdzKCkucmVtb3ZlQ2xhc3MoVEhJUyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+S4iuS4i+WumuS9jeivhuWIq1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b3AgKyBkbEhlaWdodCA+ICR3aW4uaGVpZ2h0KCkgJiYgdG9wID49IGRsSGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlRWxlbS5hZGRDbGFzcyhDTEFTUyArICd1cCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGhpZGVEb3duID0gZnVuY3Rpb24gKGNob29zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlRWxlbS5yZW1vdmVDbGFzcyhDTEFTUyArICdlZCAnICsgQ0xBU1MgKyAndXAnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5ibHVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmVhckVsZW0gPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNob29zZSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90T3B0aW9uKGlucHV0LnZhbCgpLCBmdW5jdGlvbiAobm9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdFZhbHVlID0gZGwuZmluZCgnLicgKyBUSElTKS5odG1sKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dCAmJiBpbnB1dC52YWwoaW5pdFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy/ngrnlh7vmoIfpopjljLrln59cbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlLm9uKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVFbGVtLmhhc0NsYXNzKENMQVNTICsgJ2VkJykgPyAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZGVEb3duKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWRlKGUsIHRydWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0Rvd24oKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGwuZmluZCgnLicgKyBOT05FKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL+eCueWHu+eureWktOiOt+WPlueEpueCuVxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGUuZmluZCgnLmxheXVpLWVkZ2UnKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3NlbGVjdCDkuK0gaW5wdXQg6ZSu55uY5LqL5Lu2XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5vbigna2V5dXAnLCBmdW5jdGlvbiAoZSkgeyAvL+mUruebmOadvuW8gFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXlDb2RlID0gZS5rZXlDb2RlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9UYWLplK7lsZXlvIBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoa2V5Q29kZSA9PT0gOSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93RG93bigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLm9uKCdrZXlkb3duJywgZnVuY3Rpb24gKGUpIHsgLy/plK7nm5jmjInkuItcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5Q29kZSA9IGUua2V5Q29kZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vVGFi6ZSu6ZqQ6JePXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleUNvZGUgPT09IDkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZURvd24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+agh+azqCBkZCDnmoTpgInkuK3nirbmgIFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2V0VGhpc0RkID0gZnVuY3Rpb24gKHByZXZOZXh0LCB0aGlzRWxlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmVhckRkLCBjYWNoZU5lYXJFbGVtO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/lvpfliLDlvZPliY3pmJ/liJflhYPntKBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0VsZW0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc0VsZW0gJiYgdGhpc0VsZW1bMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpc0VsZW07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmVhckVsZW0gJiYgbmVhckVsZW1bMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmVhckVsZW07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGRzLmVxKGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlTmVhckVsZW0gPSB0aGlzRWxlbVtwcmV2TmV4dF0oKTsgLy/lvZPliY3lhYPntKDnmoTpmYTov5HlhYPntKBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmVhckRkID0gdGhpc0VsZW1bcHJldk5leHRdKCdkZCcpOyAvL+W9k+WJjeWFg+e0oOeahCBkZCDlhYPntKBcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+WmguaenOmZhOi/keeahOWFg+e0oOS4jeWtmOWcqO+8jOWImeWBnOatouaJp+ihjFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNhY2hlTmVhckVsZW1bMF0pIHJldHVybjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+iusOW9lemZhOi/keeahOWFg+e0oO+8jOiuqeWFtuaIkOS4uuS4i+S4gOS4quW9k+WJjeWFg+e0oFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZWFyRWxlbSA9IHRoaXNFbGVtW3ByZXZOZXh0XSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5aaC5p6c6ZmE6L+R5LiN5pivIGRkIO+8jOaIluiAhemZhOi/keeahCBkZCDlhYPntKDmmK/npoHnlKjnirbmgIHvvIzliJnov5vlhaXpgJLlvZLmn6Xmib5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFuZWFyRGRbMF0gfHwgbmVhckRkLmhhc0NsYXNzKERJU0FCTEVEKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNldFRoaXNEZChwcmV2TmV4dCwgbmVhckVsZW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/moIfms6jmoLflvI9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmVhckRkLmFkZENsYXNzKFRISVMpLnNpYmxpbmdzKCkucmVtb3ZlQ2xhc3MoVEhJUyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/lrprkvY3mu5rliqjmnaFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRkVGhpcyA9IGRsLmNoaWxkcmVuKCdkZC5sYXl1aS10aGlzJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgcG9zVG9wID0gZGRUaGlzLnBvc2l0aW9uKCkudG9wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIGRsSGVpZ2h0ID0gZGwuaGVpZ2h0KClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgZGRIZWlnaHQgPSBkZFRoaXMuaGVpZ2h0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/oi6XpgInkuK3lhYPntKDlnKjmu5rliqjmnaHkuI3lj6/op4HlupXpg6hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvc1RvcCA+IGRsSGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkbC5zY3JvbGxUb3AocG9zVG9wICsgZGwuc2Nyb2xsVG9wKCkgLSBkbEhlaWdodCArIGRkSGVpZ2h0IC0gNSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+iLpemAieaLqeeOhOe0oOWcqOa7muWKqOadoeS4jeWPr+ingemhtumDqFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zVG9wIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGwuc2Nyb2xsVG9wKHBvc1RvcCArIGRsLnNjcm9sbFRvcCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXlDb2RlID09PSAzOCkgc2V0VGhpc0RkKCdwcmV2Jyk7IC8vVXAg6ZSuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleUNvZGUgPT09IDQwKSBzZXRUaGlzRGQoJ25leHQnKTsgLy9Eb3duIOmUrlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9FbnRlciDplK5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoa2V5Q29kZSA9PT0gMTMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkbC5jaGlsZHJlbignZGQuJyArIFRISVMpLnRyaWdnZXIoJ2NsaWNrJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8v5qOA5rWL5YC85piv5ZCm5LiN5bGe5LqOIHNlbGVjdCDpoblcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBub3RPcHRpb24gPSBmdW5jdGlvbiAodmFsdWUsIGNhbGxiYWNrLCBvcmlnaW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbnVtID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXl1aS5lYWNoKGRkcywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3RoaXMgPSAkKHRoaXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIHRleHQgPSBvdGhpcy50ZXh0KClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgbm90ID0gdGV4dC5pbmRleE9mKHZhbHVlKSA9PT0gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gJycgfHwgKG9yaWdpbiA9PT0gJ2JsdXInKSA/IHZhbHVlICE9PSB0ZXh0IDogbm90KSBudW0rKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luID09PSAna2V5dXAnICYmIG90aGlzW25vdCA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXShISURFKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm9uZSA9IG51bSA9PT0gZGRzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobm9uZSksIG5vbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL+aQnOe0ouWMuemFjVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlYXJjaCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy52YWx1ZSwga2V5Q29kZSA9IGUua2V5Q29kZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXlDb2RlID09PSA5IHx8IGtleUNvZGUgPT09IDEzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGtleUNvZGUgPT09IDM3IHx8IGtleUNvZGUgPT09IDM4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGtleUNvZGUgPT09IDM5IHx8IGtleUNvZGUgPT09IDQwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3RPcHRpb24odmFsdWUsIGZ1bmN0aW9uIChub25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkbC5maW5kKCcuJyArIE5PTkUpWzBdIHx8IGRsLmFwcGVuZCgnPHAgY2xhc3M9XCInICsgTk9ORSArICdcIj7ml6DljLnphY3pobk8L3A+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkbC5maW5kKCcuJyArIE5PTkUpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgJ2tleXVwJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRsLmZpbmQoJy4nICsgTk9ORSkucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzU2VhcmNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQub24oJ2tleXVwJywgc2VhcmNoKS5vbignYmx1cicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZEluZGV4ID0gc2VsZWN0WzBdLnNlbGVjdGVkSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXRJbnB1dCA9IGlucHV0OyAvL+W9k+WJjeeahCBzZWxlY3Qg5Lit55qEIGlucHV0IOWFg+e0oFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0VmFsdWUgPSAkKHNlbGVjdFswXS5vcHRpb25zW3NlbGVjdGVkSW5kZXhdKS5odG1sKCk7IC8v6YeN5paw6I635b6X5Yid5aeL6YCJ5Lit5YC8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90T3B0aW9uKGlucHV0LnZhbCgpLCBmdW5jdGlvbiAobm9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRWYWx1ZSB8fCBpbnB1dC52YWwoJycpOyAvL25vbmUgJiYgIWluaXRWYWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgJ2JsdXInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMjAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy/pgInmi6lcbiAgICAgICAgICAgICAgICAgICAgICAgIGRkcy5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG90aGlzID0gJCh0aGlzKSwgdmFsdWUgPSBvdGhpcy5hdHRyKCdsYXktdmFsdWUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsdGVyID0gc2VsZWN0LmF0dHIoJ2xheS1maWx0ZXInKTsgLy/ojrflj5bov4fmu6TlmahcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvdGhpcy5oYXNDbGFzcyhESVNBQkxFRCkpIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvdGhpcy5oYXNDbGFzcygnbGF5dWktc2VsZWN0LXRpcHMnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC52YWwoJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnZhbChvdGhpcy50ZXh0KCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdGhpcy5hZGRDbGFzcyhUSElTKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdGhpcy5zaWJsaW5ncygpLnJlbW92ZUNsYXNzKFRISVMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdC52YWwodmFsdWUpLnJlbW92ZUNsYXNzKCdsYXl1aS1mb3JtLWRhbmdlcicpLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheXVpLmV2ZW50LmNhbGwodGhpcywgTU9EX05BTUUsICdzZWxlY3QoJyArIGZpbHRlciArICcpJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtOiBzZWxlY3RbMF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCB2YWx1ZTogdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBvdGhpczogcmVFbGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWRlRG93bih0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmVFbGVtLmZpbmQoJ2RsPmR0Jykub24oJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJChkb2N1bWVudCkub2ZmKCdjbGljaycsIGhpZGUpLm9uKCdjbGljaycsIGhpZGUpOyAvL+eCueWHu+WFtuWug+WFg+e0oOWFs+mXrSBzZWxlY3RcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2VsZWN0cy5lYWNoKGZ1bmN0aW9uIChpbmRleCwgc2VsZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvdGhpcyA9ICQodGhpcylcbiAgICAgICAgICAgICAgICAgICAgICAgICwgaGFzUmVuZGVyID0gb3RoaXMubmV4dCgnLicgKyBDTEFTUylcbiAgICAgICAgICAgICAgICAgICAgICAgICwgZGlzYWJsZWQgPSB0aGlzLmRpc2FibGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAsIHZhbHVlID0gc2VsZWN0LnZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAsIHNlbGVjdGVkID0gJChzZWxlY3Qub3B0aW9uc1tzZWxlY3Quc2VsZWN0ZWRJbmRleF0pIC8v6I635Y+W5b2T5YmN6YCJ5Lit6aG5XG4gICAgICAgICAgICAgICAgICAgICAgICAsIG9wdGlvbnNGaXJzdCA9IHNlbGVjdC5vcHRpb25zWzBdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3RoaXMuYXR0cignbGF5LWlnbm9yZScpID09PSAnc3RyaW5nJykgcmV0dXJuIG90aGlzLnNob3coKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgaXNTZWFyY2ggPSB0eXBlb2Ygb3RoaXMuYXR0cignbGF5LXNlYXJjaCcpID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICAgICAgICAgLCBwbGFjZWhvbGRlciA9IG9wdGlvbnNGaXJzdCA/IChcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnNGaXJzdC52YWx1ZSA/IFRJUFMgOiAob3B0aW9uc0ZpcnN0LmlubmVySFRNTCB8fCBUSVBTKVxuICAgICAgICAgICAgICAgICAgICApIDogVElQUztcblxuICAgICAgICAgICAgICAgICAgICAvL+abv+S7o+WFg+e0oFxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVFbGVtID0gJChbJzxkaXYgY2xhc3M9XCInICsgKGlzU2VhcmNoID8gJycgOiAnbGF5dWktdW5zZWxlY3QgJykgKyBDTEFTU1xuICAgICAgICAgICAgICAgICAgICAgICAgLCAoZGlzYWJsZWQgPyAnIGxheXVpLXNlbGVjdC1kaXNhYmxlZCcgOiAnJykgKyAnXCI+J1xuICAgICAgICAgICAgICAgICAgICAgICAgLCAnPGRpdiBjbGFzcz1cIicgKyBUSVRMRSArICdcIj4nXG4gICAgICAgICAgICAgICAgICAgICAgICAsICgnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCInICsgcGxhY2Vob2xkZXIgKyAnXCIgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKyAoJ3ZhbHVlPVwiJyArICh2YWx1ZSA/IHNlbGVjdGVkLmh0bWwoKSA6ICcnKSArICdcIicpIC8v6buY6K6k5YC8XG4gICAgICAgICAgICAgICAgICAgICAgICArIChpc1NlYXJjaCA/ICcnIDogJyByZWFkb25seScpIC8v5piv5ZCm5byA5ZCv5pCc57SiXG4gICAgICAgICAgICAgICAgICAgICAgICArICcgY2xhc3M9XCJsYXl1aS1pbnB1dCdcbiAgICAgICAgICAgICAgICAgICAgICAgICsgKGlzU2VhcmNoID8gJycgOiAnIGxheXVpLXVuc2VsZWN0JylcbiAgICAgICAgICAgICAgICAgICAgICAgICsgKGRpc2FibGVkID8gKCcgJyArIERJU0FCTEVEKSA6ICcnKSArICdcIj4nKSAvL+emgeeUqOeKtuaAgVxuICAgICAgICAgICAgICAgICAgICAgICAgLCAnPGkgY2xhc3M9XCJsYXl1aS1lZGdlXCI+PC9pPjwvZGl2PidcbiAgICAgICAgICAgICAgICAgICAgICAgICwgJzxkbCBjbGFzcz1cImxheXVpLWFuaW0gbGF5dWktYW5pbS11cGJpdCcgKyAob3RoaXMuZmluZCgnb3B0Z3JvdXAnKVswXSA/ICcgbGF5dWktc2VsZWN0LWdyb3VwJyA6ICcnKSArICdcIj4nXG4gICAgICAgICAgICAgICAgICAgICAgICAsIGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFyciA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheXVpLmVhY2gob3B0aW9ucywgZnVuY3Rpb24gKGluZGV4LCBpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCAmJiAhaXRlbS52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyLnB1c2goJzxkZCBsYXktdmFsdWU9XCJcIiBjbGFzcz1cImxheXVpLXNlbGVjdC10aXBzXCI+JyArIChpdGVtLmlubmVySFRNTCB8fCBUSVBTKSArICc8L2RkPicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW0udGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnb3B0Z3JvdXAnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnIucHVzaCgnPGR0PicgKyBpdGVtLmxhYmVsICsgJzwvZHQ+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnIucHVzaCgnPGRkIGxheS12YWx1ZT1cIicgKyBpdGVtLnZhbHVlICsgJ1wiIHRpdGxlPVwiJyArIGl0ZW0udmFsdWUgKyAnXCIgIGNsYXNzPVwiJyArICh2YWx1ZSA9PT0gaXRlbS52YWx1ZSA/IFRISVMgOiAnJykgKyAoaXRlbS5kaXNhYmxlZCA/ICgnICcgKyBESVNBQkxFRCkgOiAnJykgKyAnXCI+JyArIGl0ZW0uaW5uZXJIVE1MICsgJzwvZGQ+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnIubGVuZ3RoID09PSAwICYmIGFyci5wdXNoKCc8ZGQgbGF5LXZhbHVlPVwiXCIgY2xhc3M9XCInICsgRElTQUJMRUQgKyAnXCI+5rKh5pyJ6YCJ6aG5PC9kZD4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJyLmpvaW4oJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfShvdGhpcy5maW5kKCcqJykpICsgJzwvZGw+J1xuICAgICAgICAgICAgICAgICAgICAgICAgLCAnPC9kaXY+J10uam9pbignJykpO1xuXG4gICAgICAgICAgICAgICAgICAgIGhhc1JlbmRlclswXSAmJiBoYXNSZW5kZXIucmVtb3ZlKCk7IC8v5aaC5p6c5bey57uP5riy5p+T77yM5YiZUmVyZW5kZXJcbiAgICAgICAgICAgICAgICAgICAgb3RoaXMuYWZ0ZXIocmVFbGVtKTtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRzLmNhbGwodGhpcywgcmVFbGVtLCBkaXNhYmxlZCwgaXNTZWFyY2gpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy/lpI3pgInmoYYv5byA5YWzXG4gICAgICAgICAgICAsIGNoZWNrYm94OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIENMQVNTID0ge1xuICAgICAgICAgICAgICAgICAgICBjaGVja2JveDogWydsYXl1aS1mb3JtLWNoZWNrYm94JywgJ2xheXVpLWZvcm0tY2hlY2tlZCcsICdjaGVja2JveCddXG4gICAgICAgICAgICAgICAgICAgICwgX3N3aXRjaDogWydsYXl1aS1mb3JtLXN3aXRjaCcsICdsYXl1aS1mb3JtLW9uc3dpdGNoJywgJ3N3aXRjaCddXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAsIGNoZWNrcyA9IGVsZW1Gb3JtLmZpbmQoJ2lucHV0W3R5cGU9Y2hlY2tib3hdJylcblxuICAgICAgICAgICAgICAgICAgICAsIGV2ZW50cyA9IGZ1bmN0aW9uIChyZUVsZW0sIFJFX0NMQVNTKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGVjayA9ICQodGhpcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy/li77pgIlcbiAgICAgICAgICAgICAgICAgICAgcmVFbGVtLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWx0ZXIgPSBjaGVjay5hdHRyKCdsYXktZmlsdGVyJykgLy/ojrflj5bov4fmu6TlmahcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIHRleHQgPSAoY2hlY2suYXR0cignbGF5LXRleHQnKSB8fCAnJykuc3BsaXQoJ3wnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrWzBdLmRpc2FibGVkKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrWzBdLmNoZWNrZWQgPyAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tbMF0uY2hlY2tlZCA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgcmVFbGVtLnJlbW92ZUNsYXNzKFJFX0NMQVNTWzFdKS5maW5kKCdlbScpLnRleHQodGV4dFsxXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tbMF0uY2hlY2tlZCA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCByZUVsZW0uYWRkQ2xhc3MoUkVfQ0xBU1NbMV0pLmZpbmQoJ2VtJykudGV4dCh0ZXh0WzBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF5dWkuZXZlbnQuY2FsbChjaGVja1swXSwgTU9EX05BTUUsIFJFX0NMQVNTWzJdICsgJygnICsgZmlsdGVyICsgJyknLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbTogY2hlY2tbMF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIHZhbHVlOiBjaGVja1swXS52YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgb3RoaXM6IHJlRWxlbVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNoZWNrcy5lYWNoKGZ1bmN0aW9uIChpbmRleCwgY2hlY2spIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG90aGlzID0gJCh0aGlzKSwgc2tpbiA9IG90aGlzLmF0dHIoJ2xheS1za2luJylcbiAgICAgICAgICAgICAgICAgICAgICAgICwgdGV4dCA9IChvdGhpcy5hdHRyKCdsYXktdGV4dCcpIHx8ICcnKS5zcGxpdCgnfCcpLCBkaXNhYmxlZCA9IHRoaXMuZGlzYWJsZWQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChza2luID09PSAnc3dpdGNoJykgc2tpbiA9ICdfJyArIHNraW47XG4gICAgICAgICAgICAgICAgICAgIHZhciBSRV9DTEFTUyA9IENMQVNTW3NraW5dIHx8IENMQVNTLmNoZWNrYm94O1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3RoaXMuYXR0cignbGF5LWlnbm9yZScpID09PSAnc3RyaW5nJykgcmV0dXJuIG90aGlzLnNob3coKTtcblxuICAgICAgICAgICAgICAgICAgICAvL+abv+S7o+WFg+e0oFxuICAgICAgICAgICAgICAgICAgICB2YXIgaGFzUmVuZGVyID0gb3RoaXMubmV4dCgnLicgKyBSRV9DTEFTU1swXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICwgcmVFbGVtID0gJChbJzxkaXYgY2xhc3M9XCJsYXl1aS11bnNlbGVjdCAnICsgUkVfQ0xBU1NbMF1cbiAgICAgICAgICAgICAgICAgICAgICAgICwgKGNoZWNrLmNoZWNrZWQgPyAoJyAnICsgUkVfQ0xBU1NbMV0pIDogJycpIC8v6YCJ5Lit54q25oCBXG4gICAgICAgICAgICAgICAgICAgICAgICAsIChkaXNhYmxlZCA/ICcgbGF5dWktY2hlY2tib3gtZGlzYmFsZWQgJyArIERJU0FCTEVEIDogJycpIC8v56aB55So54q25oCBXG4gICAgICAgICAgICAgICAgICAgICAgICAsICdcIidcbiAgICAgICAgICAgICAgICAgICAgICAgICwgKHNraW4gPyAnIGxheS1za2luPVwiJyArIHNraW4gKyAnXCInIDogJycpIC8v6aOO5qC8XG4gICAgICAgICAgICAgICAgICAgICAgICAsICc+J1xuICAgICAgICAgICAgICAgICAgICAgICAgLCBmdW5jdGlvbiAoKSB7IC8v5LiN5ZCM6aOO5qC855qE5YaF5a65XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRpdGxlID0gY2hlY2sudGl0bGUucmVwbGFjZSgvXFxzL2csICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIHR5cGUgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5aSN6YCJ5qGGXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrYm94OiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGl0bGUgPyAoJzxzcGFuPicgKyBjaGVjay50aXRsZSArICc8L3NwYW4+JykgOiAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgJzxpIGNsYXNzPVwibGF5dWktaWNvbiBsYXl1aS1pY29uLW9rXCI+PC9pPidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXS5qb2luKCcnKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5byA5YWzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgX3N3aXRjaDogJzxlbT4nICsgKChjaGVjay5jaGVja2VkID8gdGV4dFswXSA6IHRleHRbMV0pIHx8ICcnKSArICc8L2VtPjxpPjwvaT4nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHlwZVtza2luXSB8fCB0eXBlWydjaGVja2JveCddO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAsICc8L2Rpdj4nXS5qb2luKCcnKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaGFzUmVuZGVyWzBdICYmIGhhc1JlbmRlci5yZW1vdmUoKTsgLy/lpoLmnpzlt7Lnu4/muLLmn5PvvIzliJlSZXJlbmRlclxuICAgICAgICAgICAgICAgICAgICBvdGhpcy5hZnRlcihyZUVsZW0pO1xuICAgICAgICAgICAgICAgICAgICBldmVudHMuY2FsbCh0aGlzLCByZUVsZW0sIFJFX0NMQVNTKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8v5Y2V6YCJ5qGGXG4gICAgICAgICAgICAsIHJhZGlvOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIENMQVNTID0gJ2xheXVpLWZvcm0tcmFkaW8nLCBJQ09OID0gWycmI3hlNjQzOycsICcmI3hlNjNmOyddXG4gICAgICAgICAgICAgICAgICAgICwgcmFkaW9zID0gZWxlbUZvcm0uZmluZCgnaW5wdXRbdHlwZT1yYWRpb10nKVxuXG4gICAgICAgICAgICAgICAgICAgICwgZXZlbnRzID0gZnVuY3Rpb24gKHJlRWxlbSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaW8gPSAkKHRoaXMpLCBBTklNID0gJ2xheXVpLWFuaW0tc2NhbGVTcHJpbmcnO1xuXG4gICAgICAgICAgICAgICAgICAgIHJlRWxlbS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IHJhZGlvWzBdLm5hbWUsIGZvcm1zID0gcmFkaW8ucGFyZW50cyhFTEVNKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWx0ZXIgPSByYWRpby5hdHRyKCdsYXktZmlsdGVyJyk7IC8v6I635Y+W6L+H5ruk5ZmoXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2FtZVJhZGlvID0gZm9ybXMuZmluZCgnaW5wdXRbbmFtZT0nICsgbmFtZS5yZXBsYWNlKC8oXFwufCN8XFxbfFxcXSkvZywgJ1xcXFwkMScpICsgJ10nKTsgLy/mib7liLDnm7jlkIxuYW1l55qE5YWE5byfXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyYWRpb1swXS5kaXNhYmxlZCkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXl1aS5lYWNoKHNhbWVSYWRpbywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXh0ID0gJCh0aGlzKS5uZXh0KCcuJyArIENMQVNTKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0LnJlbW92ZUNsYXNzKENMQVNTICsgJ2VkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dC5maW5kKCcubGF5dWktaWNvbicpLnJlbW92ZUNsYXNzKEFOSU0pLmh0bWwoSUNPTlsxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmFkaW9bMF0uY2hlY2tlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICByZUVsZW0uYWRkQ2xhc3MoQ0xBU1MgKyAnZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlRWxlbS5maW5kKCcubGF5dWktaWNvbicpLmFkZENsYXNzKEFOSU0pLmh0bWwoSUNPTlswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByYWRpby50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheXVpLmV2ZW50LmNhbGwocmFkaW9bMF0sIE1PRF9OQU1FLCAncmFkaW8oJyArIGZpbHRlciArICcpJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW06IHJhZGlvWzBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLCB2YWx1ZTogcmFkaW9bMF0udmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIG90aGlzOiByZUVsZW1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgcmFkaW9zLmVhY2goZnVuY3Rpb24gKGluZGV4LCByYWRpbykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb3RoaXMgPSAkKHRoaXMpLCBoYXNSZW5kZXIgPSBvdGhpcy5uZXh0KCcuJyArIENMQVNTKSwgZGlzYWJsZWQgPSB0aGlzLmRpc2FibGVkO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3RoaXMuYXR0cignbGF5LWlnbm9yZScpID09PSAnc3RyaW5nJykgcmV0dXJuIG90aGlzLnNob3coKTtcbiAgICAgICAgICAgICAgICAgICAgaGFzUmVuZGVyWzBdICYmIGhhc1JlbmRlci5yZW1vdmUoKTsgLy/lpoLmnpzlt7Lnu4/muLLmn5PvvIzliJlSZXJlbmRlclxuXG4gICAgICAgICAgICAgICAgICAgIC8v5pu/5Luj5YWD57SgXG4gICAgICAgICAgICAgICAgICAgIHZhciByZUVsZW0gPSAkKFsnPGRpdiBjbGFzcz1cImxheXVpLXVuc2VsZWN0ICcgKyBDTEFTU1xuICAgICAgICAgICAgICAgICAgICAgICAgLCAocmFkaW8uY2hlY2tlZCA/ICgnICcgKyBDTEFTUyArICdlZCcpIDogJycpIC8v6YCJ5Lit54q25oCBXG4gICAgICAgICAgICAgICAgICAgICAgICAsIChkaXNhYmxlZCA/ICcgbGF5dWktcmFkaW8tZGlzYmFsZWQgJyArIERJU0FCTEVEIDogJycpICsgJ1wiPicgLy/npoHnlKjnirbmgIFcbiAgICAgICAgICAgICAgICAgICAgICAgICwgJzxpIGNsYXNzPVwibGF5dWktYW5pbSBsYXl1aS1pY29uXCI+JyArIElDT05bcmFkaW8uY2hlY2tlZCA/IDAgOiAxXSArICc8L2k+J1xuICAgICAgICAgICAgICAgICAgICAgICAgLCAnPGRpdj4nICsgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aXRsZSA9IHJhZGlvLnRpdGxlIHx8ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3RoaXMubmV4dCgpLmF0dHIoJ2xheS1yYWRpbycpID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZSA9IG90aGlzLm5leHQoKS5odG1sKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG90aGlzLm5leHQoKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRpdGxlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KCkgKyAnPC9kaXY+J1xuICAgICAgICAgICAgICAgICAgICAgICAgLCAnPC9kaXY+J10uam9pbignJykpO1xuXG4gICAgICAgICAgICAgICAgICAgIG90aGlzLmFmdGVyKHJlRWxlbSk7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50cy5jYWxsKHRoaXMsIHJlRWxlbSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHR5cGUgPyAoXG4gICAgICAgICAgICBpdGVtc1t0eXBlXSA/IGl0ZW1zW3R5cGVdKCkgOiBoaW50LmVycm9yKCfkuI3mlK/mjIHnmoQnICsgdHlwZSArICfooajljZXmuLLmn5MnKVxuICAgICAgICApIDogbGF5dWkuZWFjaChpdGVtcywgZnVuY3Rpb24gKGluZGV4LCBpdGVtKSB7XG4gICAgICAgICAgICBpdGVtKCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhhdDtcbiAgICB9O1xuXG5cbiAgICB2YXIgX3JlZ2NoZWNrID0gZnVuY3Rpb24gKGRhdGF0eXBlLCBnZXRzLCBvYmosIHVuZGVmKSB7XG5cbiAgICAgICAgdmFyIGluZm8gPSAnJ1xuICAgICAgICAgICAgLCBwYXNzZWQgPSBmYWxzZVxuICAgICAgICAgICAgLCByZWcgPSAvXFwvLitcXC8vZ1xuICAgICAgICAgICAgLCByZWdleCA9IC9eKC4rPykoXFxkKyktKFxcZCspJC9cbiAgICAgICAgICAgICwgdmVyaWZ5ID0gZm9ybS5jb25maWcudmVyaWZ5XG4gICAgICAgICAgICAsIGlzRW1wdHkgPSBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsID09PSBcIlwiIHx8IHZhbCA9PT0gJC50cmltKHRoaXMuYXR0cihcInRpcFwiKSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy9kYXRhdHlwZeacieS4ieenjeaDheWGte+8muato+WIme+8jOWHveaVsOWSjOebtOaOpee7keWumueahOato+WImTtcblxuICAgICAgICAvL+ebtOaOpeaYr+ato+WImTtcbiAgICAgICAgaWYgKHJlZy50ZXN0KGRhdGF0eXBlKSkge1xuICAgICAgICAgICAgdmFyIHJlZ3N0ciA9IGRhdGF0eXBlLm1hdGNoKHJlZylbMF0uc2xpY2UoMSwgLTEpO1xuICAgICAgICAgICAgdmFyIHBhcmFtID0gZGF0YXR5cGUucmVwbGFjZShyZWcsIFwiXCIpO1xuICAgICAgICAgICAgdmFyIHJleHAgPSBSZWdFeHAocmVnc3RyLCBwYXJhbSk7XG5cbiAgICAgICAgICAgIHBhc3NlZCA9IHJleHAudGVzdChnZXRzKTtcblxuICAgICAgICAgICAgLy9mdW5jdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmVyaWZ5W2RhdGF0eXBlXSkgPT0gXCJbb2JqZWN0IFJlZ0V4cF1cIikge1xuICAgICAgICAgICAgcGFzc2VkID0gdmVyaWZ5W2RhdGF0eXBlXS50ZXN0KGdldHMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2ZXJpZnlbZGF0YXR5cGVdID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHBhc3NlZCA9IHZlcmlmeVtkYXRhdHlwZV0oZ2V0cywgb2JqKTtcbiAgICAgICAgICAgIGlmIChwYXNzZWQgPT09IHRydWUgfHwgcGFzc2VkID09PSB1bmRlZikge1xuICAgICAgICAgICAgICAgIHBhc3NlZCA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGluZm8gPSBwYXNzZWQ7XG4gICAgICAgICAgICAgICAgcGFzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8v6Ieq5a6a5LmJ5q2j5YiZO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2ZXJpZnlbZGF0YXR5cGVdKSA9PSBcIltvYmplY3QgQXJyYXldXCIpIHtcbiAgICAgICAgICAgIHBhc3NlZCA9IHZlcmlmeVtkYXRhdHlwZV1bMF0udGVzdChnZXRzKTtcbiAgICAgICAgICAgIGlmICghcGFzc2VkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGdldHMgPT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5mbyA9IG9iai5hdHRyKCdsYXktbnVsbFRleHQnKSB8fCB2ZXJpZnlbZGF0YXR5cGVdWzFdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGluZm8gPSBvYmouYXR0cignbGF5LWVycm9yVGV4dCcpIHx8IHZlcmlmeVtkYXRhdHlwZV1bMV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvL+iHquWKqOaJqeWxlWRhdGF0eXBlO1xuICAgICAgICAgICAgaWYgKCEoZGF0YXR5cGUgaW4gdmVyaWZ5KSkge1xuICAgICAgICAgICAgICAgIHZhciBtYWMgPSBkYXRhdHlwZS5tYXRjaChyZWdleCksXG4gICAgICAgICAgICAgICAgICAgIHRlbXA7XG5cbiAgICAgICAgICAgICAgICBpZiAoIW1hYykge1xuICAgICAgICAgICAgICAgICAgICBwYXNzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuYW1lIGluIHZlcmlmeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcCA9IG5hbWUubWF0Y2gocmVnZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0ZW1wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFjWzFdID09PSB0ZW1wWzFdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0ciA9IHZlcmlmeVtuYW1lXVswXS50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbSA9IHN0ci5tYXRjaCgvXFwvW21naV0qL2cpWzFdLnJlcGxhY2UoXCJcXC9cIiwgXCJcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ3hwID0gbmV3IFJlZ0V4cChcIlxcXFx7XCIgKyB0ZW1wWzJdICsgXCIsXCIgKyB0ZW1wWzNdICsgXCJcXFxcfVwiLCBcImdcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UoL1xcL1ttZ2ldKi9nLCBcIlxcL1wiKS5yZXBsYWNlKHJlZ3hwLCBcIntcIiArIG1hY1syXSArIFwiLFwiICsgbWFjWzNdICsgXCJ9XCIpLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9eXFwvLywgXCJcIikucmVwbGFjZSgvXFwvJC8sIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcmlmeVtkYXRhdHlwZV0gPSBuZXcgUmVnRXhwKHN0ciwgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZlcmlmeVtkYXRhdHlwZV0pID09IFwiW29iamVjdCBSZWdFeHBdXCIpIHtcbiAgICAgICAgICAgICAgICBwYXNzZWQgPSB2ZXJpZnlbZGF0YXR5cGVdLnRlc3QoZ2V0cyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIC8v6KeE5YiZ6aqM6K+B6YCa6L+H5ZCO77yM6L+Y6ZyA6KaB5a+557uR5a6acmVjaGVja+eahOWvueixoei/m+ihjOWAvOavlOi+gztcbiAgICAgICAgaWYgKHBhc3NlZCAmJiBvYmouYXR0cihcInJlY2hlY2tcIikpIHtcbiAgICAgICAgICAgIHZhciB0aGVvdGhlciA9IG9iai5wYXJlbnRzKCdmb3JtJykuZmluZChcImlucHV0W25hbWU9J1wiICsgb2JqLmF0dHIoXCJyZWNoZWNrXCIpICsgXCInXTpmaXJzdFwiKTtcbiAgICAgICAgICAgIGlmIChnZXRzICE9IHRoZW90aGVyLnZhbCgpKSB7XG4gICAgICAgICAgICAgICAgcGFzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaW5mbyA9IG9iai5hdHRyKFwibGF5LXJlY2hlY2stZXJyb3JUZXh0XCIpIHx8ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghcGFzc2VkKSB7XG4gICAgICAgICAgICBpZiAoZ2V0cyA9PSAnJyAmJiBpbmZvID09ICcnKSB7XG4gICAgICAgICAgICAgICAgaW5mbyA9IG9iai5hdHRyKCdsYXktbnVsbFRleHQnKSB8fCBcIuW/heWhq+mhueS4jeiDveS4uuepuiFcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGluZm8gPSBpbmZvIHx8IG9iai5hdHRyKCdsYXktZXJyb3JUZXh0JykgfHwgKHZlcmlmeVtkYXRhdHlwZV0gPyB2ZXJpZnlbZGF0YXR5cGVdWzFdIDogXCLloavlhpnplJnor68s6K+35qOA5p+lIVwiKVxuICAgICAgICB9XG5cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcGFzc2VkOiBwYXNzZWRcbiAgICAgICAgICAgICwgZXJyb3JUZXh0OiBpbmZvXG4gICAgICAgIH1cblxuICAgIH07XG4gICAgLy/ooajljZXmj5DkuqTmoKHpqoxcbiAgICB2YXIgc3VibWl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYnV0dG9uID0gJCh0aGlzKSwgdmVyaWZ5ID0gZm9ybS5jb25maWcudmVyaWZ5LCBzdG9wID0gbnVsbFxuICAgICAgICAgICAgLCBEQU5HRVIgPSAnbGF5dWktZm9ybS1kYW5nZXInLCBlbGVtID0gYnV0dG9uLnBhcmVudHMoRUxFTSlcblxuICAgICAgICAgICAgLCB2ZXJpZnlFbGVtID0gZWxlbS5maW5kKCcqW2xheS12ZXJpZnldJykgLy/ojrflj5bpnIDopoHmoKHpqoznmoTlhYPntKBcbiAgICAgICAgICAgICwgZm9ybUVsZW0gPSBidXR0b24ucGFyZW50cygnZm9ybScpWzBdIC8v6I635Y+W5b2T5YmN5omA5Zyo55qEZm9ybeWFg+e0oO+8jOWmguaenOWtmOWcqOeahOivnVxuICAgICAgICAgICAgLCBmaWx0ZXIgPSBidXR0b24uYXR0cignbGF5LWZpbHRlcicpXG4gICAgICAgICAgICAsIGlnbm9yZUhpZGRlbiA9IGJ1dHRvbi5wYXJlbnRzKCdmb3JtJykuZGF0YSgnaWdub3JlSGlkZGVuJykgfHwgZmFsc2U7IC8v6I635Y+W6L+H5ruk5ZmoXG5cbiAgICAgICAgLy/lvIDlp4vmoKHpqoxcbiAgICAgICAgbGF5dWkuZWFjaCh2ZXJpZnlFbGVtLCBmdW5jdGlvbiAoXywgaXRlbSkge1xuICAgICAgICAgICAgdmFyIG90aGlzID0gJCh0aGlzKVxuICAgICAgICAgICAgICAgICwgdmVycyA9IG90aGlzLmF0dHIoJ2xheS12ZXJpZnknKS5zcGxpdCgnfCcpXG4gICAgICAgICAgICAgICAgLCB2ZXJUeXBlID0gb3RoaXMuYXR0cignbGF5LXZlclR5cGUnKSAvL+aPkOekuuaWueW8j1xuICAgICAgICAgICAgICAgICwgb3RoaXNfaWdub3JlSGlkZGVuID0gb3RoaXMuZGF0YSgnaWdub3JlSGlkZGVuJykgfHwgZmFsc2UgLy/ojrflj5bov4fmu6TlmahcbiAgICAgICAgICAgICAgICAsIHZhbHVlID0gdGhpcy50eXBlID09ICdmaWxlJyA/IHRoaXMuZmlsZXNbMF0gOiBvdGhpcy52YWwoKTtcbiAgICAgICAgICAgIG90aGlzLnJlbW92ZUNsYXNzKERBTkdFUik7XG5cblxuICAgICAgICAgICAgaWYgKG90aGlzX2lnbm9yZUhpZGRlbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpZ25vcmVIaWRkZW4gJiYgb3RoaXMuaXMoXCI6aGlkZGVuXCIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsYXl1aS5lYWNoKHZlcnMsIGZ1bmN0aW9uIChfLCB0aGlzVmVyKSB7XG5cbiAgICAgICAgICAgICAgICAvL+WMuemFjemqjOivgeinhOWImVxuICAgICAgICAgICAgICAgIHZhciB2ZXJpZnlfcmVzID0gX3JlZ2NoZWNrKHRoaXNWZXIsIHZhbHVlLCBvdGhpcyk7XG4gICAgICAgICAgICAgICAgdmFyIGlzVHJ1ZSA9ICF2ZXJpZnlfcmVzLnBhc3NlZC8v5piv5ZCm5ZG95Lit5qCh6aqMXG4gICAgICAgICAgICAgICAgICAgICwgZXJyb3JUZXh0ID0gdmVyaWZ5X3Jlcy5lcnJvclRleHQgfHwgJyc7XG5cbiAgICAgICAgICAgICAgICAvL+WmguaenOaYr+W/heWhq+mhueaIluiAhemdnuepuuWRveS4reagoemqjO+8jOWImemYu+atouaPkOS6pO+8jOW8ueWHuuaPkOekulxuICAgICAgICAgICAgICAgIGlmIChpc1RydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy/mj5DnpLrlsYLpo47moLxcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZlclR5cGUgPT09ICd0aXBzJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXIudGlwcyhlcnJvclRleHQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG90aGlzLmF0dHIoJ2xheS1pZ25vcmUnKSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0udGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnc2VsZWN0JyB8fCAvXmNoZWNrYm94fHJhZGlvJC8udGVzdChpdGVtLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3RoaXMubmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0oKSwge3RpcHM6IDF9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2ZXJUeXBlID09PSAnYWxlcnQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllci5hbGVydChlcnJvclRleHQsIHt0aXRsZTogJ+aPkOekuicsIHNoYWRlQ2xvc2U6IHRydWV9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyLm1zZyhlcnJvclRleHQsIHtpY29uOiA1LCBzaGlmdDogNn0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8v6Z2e56e75Yqo6K6+5aSH6Ieq5Yqo5a6a5L2N54Sm54K5XG4gICAgICAgICAgICAgICAgICAgIGlmICghZGV2aWNlLmFuZHJvaWQgJiYgIWRldmljZS5pb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0cmlnZ2VyID0gZnVuY3Rpb24gKGVsZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbS5maXJlRXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS5maXJlRXZlbnQoJ29uZm9jdXMnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldiA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiSFRNTEV2ZW50c1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXYuaW5pdEV2ZW50KFwiZm9jdXNcIiwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtLmRpc3BhdGNoRXZlbnQoZXYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvdGhpcy5oYXNDbGFzcygnbGF5dWktaWNvbi1kYXRlJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcihvdGhpcy5nZXQoMCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgNTAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG90aGlzLmFkZENsYXNzKERBTkdFUik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdG9wID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoc3RvcCkgcmV0dXJuIHN0b3A7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChzdG9wKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBmaWVsZCA9IGZvcm1TZXJpYWxpemUoZm9ybUVsZW0sIHtoYXNoOiB0cnVlLCBlbXB0eTogdHJ1ZSwgaXNJZ25vcmVIaWRkZW46IGlnbm9yZUhpZGRlbn0pO1xuXG4gICAgICAgIC8v6I635Y+W5a2X5q61XG4gICAgICAgIHJldHVybiBsYXl1aS5ldmVudC5jYWxsKHRoaXMsIE1PRF9OQU1FLCAnc3VibWl0KCcgKyBmaWx0ZXIgKyAnKScsIHtcbiAgICAgICAgICAgIGVsZW06IHRoaXNcbiAgICAgICAgICAgICwgZm9ybTogZm9ybUVsZW1cbiAgICAgICAgICAgICwgZmllbGQ6IGZpZWxkXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvL+iHquWKqOWujOaIkOa4suafk1xuICAgIHZhciBmb3JtID0gbmV3IEZvcm0oKVxuICAgICAgICAsICRkb20gPSAkKGRvY3VtZW50KSwgJHdpbiA9ICQod2luZG93KTtcblxuICAgIGZvcm0ucmVuZGVyKCk7XG5cbiAgICAvL+ihqOWNlXJlc2V06YeN572u5riy5p+TXG4gICAgJGRvbS5vbigncmVzZXQnLCBFTEVNLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBmaWx0ZXIgPSAkKHRoaXMpLmF0dHIoJ2xheS1maWx0ZXInKTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmb3JtLnJlbmRlcihudWxsLCBmaWx0ZXIpO1xuICAgICAgICB9LCA1MCk7XG4gICAgfSk7XG5cbiAgICAvL+ihqOWNleaPkOS6pOS6i+S7tlxuICAgICRkb20ub24oJ3N1Ym1pdCcsIEVMRU0sIHN1Ym1pdClcbiAgICAgICAgLm9uKCdjbGljaycsICcqW2xheS1zdWJtaXRdJywgc3VibWl0KTtcblxuICAgIGV4cG9ydHMoTU9EX05BTUUsIGZvcm0pO1xufSk7XG5cbiBcbiJdfQ==
